/**
 ** This turbo configuration is for the root package of non-hybrid monorepos. It
 ** configures the four turbo-ready symbiote commands invoked via NPM scripts:
 ** lint ("turbo:lint"), build ("turbo:build"), test ("turbo:test"), and release
 ** ("turbo:release").
 **
 ** Symbiote has two operating modes: multiversal and non-multiversal.
 ** Non-hybrid monorepos can choose symbiote's operating mode via the project's
 ** root package.json::scripts field. When this field includes a "turbo:init"
 ** script containing the string "--multiversal" and NOT "--multiversal=false",
 ** symbiote WILL operate in multiversal mode.
 **
 ** One of the effects of this is: each of this project's turbo.json files
 ** (except this one) will be regenerated at the start of each Turbo invocation.
 ** This allows Turbo to remain aware of inter-package dependencies (i.e.
 ** multiversal imports) as the project changes.
 **
 ** On the other hand, when "turbo:init" is omitted, or exists but does not
 ** include the string "--multiversal", or includes the string
 ** "--multiversal=false", symbiote will operate in NON-multiversal mode. In
 ** this mode, multiversal imports are not allowed and this file is never
 ** regenerated.
 **
 ** See the symbiote wiki for more details on multiversal mode.
 */

{
  // TODO: explore remote caching with Turbo and xpipeline
  "$schema": "https://turbo.build/schema.json",

  // ! Note that, topologically, the "root" package is the first dependency of
  // ! all other packages in the repository. Therefore, its scripts, if matched,
  // ! will be run first. This is why the turbo-specific scripts use the
  // ! "turbo:" prefix.

  // * Prevents environment variables NOT listed in a task-level or global env
  // * config from being accessible by tasks. If an environment variable isn't
  // * making it through, the solution is to update one of the env-related
  // * configuration options elsewhere in this file:
  "envMode": "strict",
  // * Global environment variables that, when changed, SHOULD cause Turbo to
  // * recalculate all task outputs. Wildcards and negation are supported too.
  "globalEnv": ["{{globalEnv}}"],
  // * Global environment variables that, when changed, should NOT cause Turbo
  // * to recalculate all task outputs but should still be available to them
  // * anyway.
  // ! BE CAREFUL not to put something here that shouldn't be here. Just because
  // ! a variable is in .env does NOT mean it automatically goes here!
  "globalPassThroughEnv": ["{{globalPassThroughEnv}}"],

  // * Global "inputs" for all tasks. These should include all the
  // * infrastructure files at the project-root level (and package-root level if
  // * this file is for a root package in a hybridrepo or polyrepo).
  "globalDependencies": ["{{globalDependencies}}"],

  // * Each of these tasks can be executed by the turbo command. If there are
  // * ANY package.json files with script keys matching the executed task's
  // * name, they will also be run. If a package lists another intra-project
  // * package as a dependency in its package.json, tasks will be run in
  // * topological order (and also with respect to "dependsOn").
  "tasks": {
    // * Will run any matching npm scripts with this task name, but it can also
    // * be a custom task name for which no scripts yet exist.
    "lint": {
      // * If false, this task's outputs will never be cached and this task will
      // * always be rerun; this is useful for powerful tasks like "release".
      //"cache": false,
      // * Whether the task might require interaction from the user. If so, set
      // * this to true (which also requires "cache: false").
      // ! Note that local interactivity is fine, but interactivity should never
      // ! be necessary for a task succeed in an CI/CD scenario.
      //"interactive": true,
      // * These are the NPM SCRIPTS (and not necessarily the "tasks" from this
      // * file) and sub-tasks (defined by turbo.json in sub-roots when this
      // * file is at the project root) that exist in zero or more packages'
      // * package.json that must complete successfully before this task can
      // * execute.
      // *
      // * To target intra-package scripts, just use the scripts' name (e.g.
      // * "build"). To target inter-package scripts in topological order, use
      // * the "^" microsyntax (e.g. "^build"). To target inter-package scripts
      // * arbitrarily, use the "#" microsyntax (e.g. "utils#build"). For tasks
      // * that do not depend on any scripts to execute (that don't already
      // * match the task name), specify an empty array.
      // *
      // * Note that scripts with corresponding tasks marked "persistent"
      // * cannot be targeted by "dependsOn".
      "dependsOn": ["{{turboInitTaskName}}", "^lint"]
      // * "inputs" files will, when changed, cause Turbo to recalculate all
      // * outputs for this task (i.e. force a cache miss). Supports globs and
      // * negation, and paths are relative to the PACKAGE root.
      // ! Note that "inputs" when OMITTED (not just empty) defaults to all
      // ! files in the package that are checked into source control. Specifying
      // ! a custom "inputs" field turns this off, meaning it is possible to
      // ! target files that are ignored by git. Instead of this allow-list
      // ! approach, you can use a deny-list approach via "$TURBO_DEFAULT$",
      // ! e.g.: ["$TURBO_DEFAULT$", "!README.md"] (everything but README.md).
      // * For projects using symbiote, "inputs" should usually be defined since
      // * hybridrepo root package are considered an "implicit dependency" of
      // * all other packages in recent versions of Turbo and we need to work
      // * around that. The "lint" task is a notable exception.
      //"inputs": [],
      // * "outputs" files will be returned from the cache. Supports globs and
      // * negation, and paths are relative to the PACKAGE root. An empty
      // * "outputs" field instructs Turbo to only cache logs, which is still
      // * incredibly useful even for "empty" tasks.
      // ! Note that cache directories within output directories should usually
      // ! be negated/excluded, e.g. "!.build/cache/**" or "!.next/cache/**"
      //"outputs": []
      // * Environment variables that, when changed, SHOULD cause Turbo to
      // * recalculate this task's outputs. Wildcards and negation are supported
      // * too.
      //"env": []
      // * Environment variables that, when changed, should NOT cause Turbo to
      // * recalculate this task's outputs but should still be available to it
      // * anyway.
      // ! BE CAREFUL not to put something here that shouldn't be here. Just
      // ! because a variable is in .env does NOT mean it automatically goes
      // ! here!
      //"passThroughEnv": []
    },

    "build": {
      "dependsOn": ["{{turboInitTaskName}}"],
      "inputs": [
        // ? Only invalidate the cache if one of our src files changes
        "src/**",
        "src/**/*.mjs",
        "src/**/*.cjs",
        "src/**/*.ts",
        "src/**/*.tsx",
        "src/**/*.cts",
        "src/**/*.mts",
        "src/**/*.json"
      ],
      "outputs": ["dist/**"]
    },

    "test": {
      "dependsOn": ["{{turboInitTaskName}}"],
      "inputs": [
        "src/**",
        "types/**",
        "packages/*/src/**",
        "packages/*/types/**"
      ]
    },

    "release": {
      "cache": false,
      "interactive": true,
      "dependsOn": ["{{turboInitTaskName}}"]
    },

    "{{turboInitTaskName}}": {}
  },

  // * It seems to be the case that the "stream" UI can still allow for stdin
  // * interactivity if the task has "cache: false" and "interactive: true".
  "ui": "stream",
  // Not a wise choice to use package.json::packageManager for this. Why not
  // just have a turbo.json::packageManager key? Check on this periodically.
  "dangerouslyDisablePackageManagerCheck": true
}
