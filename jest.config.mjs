import { cpus } from 'node:os';

/**
 * @type {import('jest').Config}
 */
const config = {
  restoreMocks: true,
  resetMocks: true,
  clearMocks: true,
  testEnvironment: 'node',
  testRunner: 'jest-circus/runner',
  // ? 24h if debugging so MMS and other tools don't choke, otherwise 1m
  testTimeout:
    1000 *
    60 *
    (process.env.VSCODE_INSPECTOR_OPTIONS
      ? 60 * 24
      : process.platform === 'win32'
        ? 5
        : 1),
  // ? Minimum of 2 concurrent tests executed at once; maximum of cpu cores - 1
  maxConcurrency: Math.max(cpus().length - 1, 2),
  verbose: false,
  // ? This key is sometimes overridden on the CLI level by xscripts
  testPathIgnorePatterns: ['/node_modules/', '/dist/', '/src/', '/.transpiled/'],
  // ! The aliases described in "moduleNameMapper" are auto-generated by
  // ! xscripts. Instead of modifying it directly, consider regenerating aliases
  // ! across the entire project: `xscripts project renovate
  // ! --regenerate-aliases`; you can include custom aliases using the
  // ! `--with-alias` parameter.
  // * These aliases appear in:
  // *   - tsconfig.json      (JSON)
  // *   - babel.config.js    (CJS)
  // *   - eslint.config.mjs  (ESM)
  // *   - jest.config.mjs    (ESM)
  // *   - next.config.mjs    (ESM)
  // *   - webpack.config.mjs (ESM)
  moduleNameMapper: {
    '^universe:(.+)$': '<rootDir>/src/$1',
    '^universe$': '<rootDir>/src/index.ts',
    '^multiverse\\+bfe:(.+)$': '<rootDir>/packages/bfe/src/$1',
    '^multiverse\\+babel-plugin-metadata-accumulator:(.+)$':
      '<rootDir>/packages/babel-plugin-metadata-accumulator/src/$1',
    '^multiverse\\+cli-utils:(.+)$': '<rootDir>/packages/cli-utils/src/$1',
    '^multiverse\\+debug:(.+)$': '<rootDir>/packages/debug/src/$1',
    '^multiverse\\+project-utils:(.+)$': '<rootDir>/packages/project-utils/src/$1',
    '^multiverse\\+rejoinder:(.+)$': '<rootDir>/packages/rejoinder/src/$1',
    '^multiverse\\+run:(.+)$': '<rootDir>/packages/run/src/$1',
    '^multiverse\\+test-utils:(.+)$': '<rootDir>/packages/test-utils/src/$1',
    '^multiverse\\+bfe$': '<rootDir>/packages/bfe/src/index.ts',
    '^multiverse\\+babel-plugin-metadata-accumulator$':
      '<rootDir>/packages/babel-plugin-metadata-accumulator/src/index.ts',
    '^multiverse\\+cli-utils$': '<rootDir>/packages/cli-utils/src/index.ts',
    '^multiverse\\+debug$': '<rootDir>/packages/debug/src/index.ts',
    '^multiverse\\+project-utils$': '<rootDir>/packages/project-utils/src/index.ts',
    '^multiverse\\+rejoinder$': '<rootDir>/packages/rejoinder/src/index.ts',
    '^multiverse\\+run$': '<rootDir>/packages/run/src/index.ts',
    '^multiverse\\+test-utils$': '<rootDir>/packages/test-utils/src/index.ts',
    '^testverse:(.+)$': '<rootDir>/test/$1',
    '^testverse\\+bfe:(.+)$': '<rootDir>/packages/bfe/test/$1',
    '^testverse\\+babel-plugin-metadata-accumulator:(.+)$':
      '<rootDir>/packages/babel-plugin-metadata-accumulator/test/$1',
    '^testverse\\+cli-utils:(.+)$': '<rootDir>/packages/cli-utils/test/$1',
    '^testverse\\+debug:(.+)$': '<rootDir>/packages/debug/test/$1',
    '^testverse\\+project-utils:(.+)$': '<rootDir>/packages/project-utils/test/$1',
    '^testverse\\+rejoinder:(.+)$': '<rootDir>/packages/rejoinder/test/$1',
    '^testverse\\+run:(.+)$': '<rootDir>/packages/run/test/$1',
    '^testverse\\+test-utils:(.+)$': '<rootDir>/packages/test-utils/test/$1',
    '^typeverse:(.+)$': '<rootDir>/types/$1',
    '^rootverse:(.+)$': '<rootDir>/$1',
    '^rootverse\\+bfe:(.+)$': '<rootDir>/packages/bfe/$1',
    '^rootverse\\+babel-plugin-metadata-accumulator:(.+)$':
      '<rootDir>/packages/babel-plugin-metadata-accumulator/$1',
    '^rootverse\\+cli-utils:(.+)$': '<rootDir>/packages/cli-utils/$1',
    '^rootverse\\+debug:(.+)$': '<rootDir>/packages/debug/$1',
    '^rootverse\\+project-utils:(.+)$': '<rootDir>/packages/project-utils/$1',
    '^rootverse\\+rejoinder:(.+)$': '<rootDir>/packages/rejoinder/$1',
    '^rootverse\\+run:(.+)$': '<rootDir>/packages/run/$1',
    '^rootverse\\+test-utils:(.+)$': '<rootDir>/packages/test-utils/$1'
  },
  setupFilesAfterEnv: ['./test/setup.ts'],
  collectCoverageFrom: ['src/**/*.ts?(x)'],
  // ? Tell Jest to transpile node_modules (for ESM interop)
  //transformIgnorePatterns: [],
  // ? Make sure jest-haste-map doesn't try to parse and cache fixtures (which
  // ? also means snapshot files from these dirs are ignored as well)
  modulePathIgnorePatterns: ['/test/fixtures/', '/.transpiled/']
};

if (Number(process.env.XSCRIPTS_TEST_JEST_SKIP_SLOW_TESTS) >= 2) {
  config.testPathIgnorePatterns.push(String.raw`-slow\.`);
}

export default config;
