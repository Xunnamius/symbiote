// @ts-check
/* eslint-disable @typescript-eslint/unbound-method */
'use strict';

const {
  dirname,
  relative: toRelativePath,
  resolve: toAbsolutePath
} = require('node:path');

// * Every now and then, we adopt best practices from CRA
// * https://tinyurl.com/yakv4ggx

// ? https://nodejs.org/en/about/releases
const NODE_LTS = 'maintained node versions';

const dTsExtensionsToReplace = [
  // TODO: Replace with the extensions exports
  '.d.ts',
  '.ts',
  '.tsx',
  '.mts',
  '.cts',
  '.jsx',
  '.mjs',
  '.cjs'
];

const dTsExtensionsToReplaceRegExp = new RegExp(
  `\\.(${dTsExtensionsToReplace.join('|').replaceAll('.', '')})$`
);

// {@xscripts/notExtraneous @babel/cli}

// TODO: replace extensions arrays with well known exports

// ! The aliases described in "alias" are auto-generated by xscripts. Instead of
// ! modifying it directly, consider regenerating aliases across the entire
// ! project: `xscripts project renovate --regenerate-aliases`; you can include
// ! custom aliases using the `--with-alias` parameter.
// * These aliases appear in:
// *   - tsconfig.json      (JSON)
// *   - babel.config.js    (CJS)
// *   - eslint.config.mjs  (ESM)
// *   - jest.config.mjs    (ESM)
// *   - next.config.mjs    (ESM)
// *   - webpack.config.mjs (ESM)
const wellKnownAliases = {
  '^universe (.+)$': String.raw`./src/\1`,
  '^universe$': './src/index.ts',
  '^multiverse#bfe (.+)$': String.raw`./packages/bfe/src/\1`,
  '^multiverse#babel-plugin-metadata-accumulator (.+)$': String.raw`./packages/babel-plugin-metadata-accumulator/src/\1`,
  '^multiverse#cli-utils (.+)$': String.raw`./packages/cli-utils/src/\1`,
  '^multiverse#debug (.+)$': String.raw`./packages/debug/src/\1`,
  '^multiverse#project-utils (.+)$': String.raw`./packages/project-utils/src/\1`,
  '^multiverse#rejoinder (.+)$': String.raw`./packages/rejoinder/src/\1`,
  '^multiverse#run (.+)$': String.raw`./packages/run/src/\1`,
  '^multiverse#bfe$': './packages/bfe/src/index.ts',
  '^multiverse#babel-plugin-metadata-accumulator$':
    './packages/babel-plugin-metadata-accumulator/src/index.ts',
  '^multiverse#cli-utils$': './packages/cli-utils/src/index.ts',
  '^multiverse#debug$': './packages/debug/src/index.ts',
  '^multiverse#project-utils$': './packages/project-utils/src/index.ts',
  '^multiverse#rejoinder$': './packages/rejoinder/src/index.ts',
  '^multiverse#run$': './packages/run/src/index.ts',
  '^testverse (.+)$': String.raw`./test/\1`,
  '^testverse#bfe (.+)$': String.raw`./packages/bfe/test/\1`,
  '^testverse#babel-plugin-metadata-accumulator (.+)$': String.raw`./packages/babel-plugin-metadata-accumulator/test/\1`,
  '^testverse#cli-utils (.+)$': String.raw`./packages/cli-utils/test/\1`,
  '^testverse#debug (.+)$': String.raw`./packages/debug/test/\1`,
  '^testverse#project-utils (.+)$': String.raw`./packages/project-utils/test/\1`,
  '^testverse#rejoinder (.+)$': String.raw`./packages/rejoinder/test/\1`,
  '^testverse#run (.+)$': String.raw`./packages/run/test/\1`,
  '^typeverse (.+)$': String.raw`./types/\1`,
  '^# (.+)$': String.raw`./\1`,
  '^#bfe (.+)$': String.raw`./packages/bfe/\1`,
  '^#babel-plugin-metadata-accumulator (.+)$': String.raw`./packages/babel-plugin-metadata-accumulator/\1`,
  '^#cli-utils (.+)$': String.raw`./packages/cli-utils/\1`,
  '^#debug (.+)$': String.raw`./packages/debug/\1`,
  '^#project-utils (.+)$': String.raw`./packages/project-utils/\1`,
  '^#rejoinder (.+)$': String.raw`./packages/rejoinder/\1`,
  '^#run (.+)$': String.raw`./packages/run/\1`
};

// TODO: import from util/constant
const isRelativePathRegExp = /^\.\.?(\/|$)/;

const babelPluginModuleResolver = [
  // {@xscripts/notExtraneous babel-plugin-module-resolver}
  'babel-plugin-module-resolver',
  {
    root: '.',
    extensions: ['.ts', '.tsx', '.js', '.jsx', '.json'],
    alias: wellKnownAliases
  }
];

/**
 * @type {import('@babel/core').TransformOptions}
 */
module.exports = {
  comments: false,
  parserOpts: { strictMode: true },
  assumptions: {
    constantReexports: true
  },
  plugins: [
    // {@xscripts/notExtraneous @babel/plugin-proposal-export-default-from}
    '@babel/plugin-proposal-export-default-from',
    // {@xscripts/notExtraneous @babel/plugin-syntax-import-attributes}
    '@babel/plugin-syntax-import-attributes'
  ],
  // ? Sub-keys under the "env" config key will augment the above
  // ? configuration depending on the value of NODE_ENV and friends. Default
  // ? is: development
  env: {
    // * Used by Jest and `npm test`
    test: {
      comments: true,
      sourceMaps: 'inline',
      presets: [
        // {@xscripts/notExtraneous @babel/preset-env}
        ['@babel/preset-env', { targets: { node: true } }],
        // {@xscripts/notExtraneous @babel/preset-typescript}
        ['@babel/preset-typescript', { allowDeclareFields: true }],
        // {@xscripts/notExtraneous @babel/preset-react}
        ['@babel/preset-react', { runtime: 'automatic' }]
        // ? We don't care about minification
      ],
      plugins: [
        babelPluginModuleResolver
        // TODO: investigate why this is causing a strange error with coverage
        // ? Only active when testing, the plugin solves the following problem:
        // ? https://stackoverflow.com/q/40771520/1367414
        // {@xscripts/notExtraneous babel-plugin-explicit-exports-references}
        //'babel-plugin-explicit-exports-references'
      ]
    },
    // * Used by `npm run build` for compiling CJS to code output in ./dist
    'production-cjs': {
      presets: [
        [
          // {@xscripts/notExtraneous @babel/preset-env}
          '@babel/preset-env',
          {
            // ? https://babeljs.io/docs/en/babel-preset-env#modules
            modules: 'cjs',
            targets: NODE_LTS,
            useBuiltIns: 'usage',
            corejs: '3.38',
            shippedProposals: true,
            exclude: ['transform-dynamic-import']
          }
        ],
        // {@xscripts/notExtraneous @babel/preset-typescript}
        ['@babel/preset-typescript', { allowDeclareFields: true }],
        // {@xscripts/notExtraneous @babel/preset-react}
        ['@babel/preset-react', { runtime: 'automatic' }]
      ],
      plugins: [
        babelPluginModuleResolver,
        [
          // {@xscripts/notExtraneous babel-plugin-transform-rewrite-imports}
          'babel-plugin-transform-rewrite-imports',
          {
            appendExtension: '.js',
            replaceExtensions: { '(.+)\\.(c|m)?ts(x)?$': '$1.$2js$3' }
          }
        ]
      ]
    },
    // TODO: add production-esm too
    // * Used by `npm run build` for fixing declaration file imports in ./dist
    'production-types': {
      comments: true,
      plugins: [
        // {@xscripts/notExtraneous @babel/plugin-syntax-typescript}
        ['@babel/plugin-syntax-typescript', { dts: true }],
        [
          // {@xscripts/notExtraneous babel-plugin-transform-rewrite-imports}
          'babel-plugin-transform-rewrite-imports',
          {
            appendExtension: '.js',
            recognizedExtensions: ['.js'],
            replaceExtensions:
              // TODO: 1. rootverse specifiers need to go one level above ./dist
              // TODO: 2. need to test that rootverse specifiers trigger outsidedist error
              // TODO: 3. need to test that rootverse specifiers referring to package.json::files do not trigger errors and actually work in non-dts files
              {
                // ? Replace any aliases with their reified filesystem path
                ...Object.fromEntries(
                  Object.entries(wellKnownAliases).map((a) => makeDTsReplacerEntry(a))
                ),
                // ? Replace any JS/TS extensions with .d.ts
                ...Object.fromEntries(
                  dTsExtensionsToReplace.map((extension) => [extension, '.js'])
                )
              }
          }
        ]
      ]
    }
  }
};

// TODO: add debug calls in this function
/**
 * Takes a path relative to the project root and returns a function that, when
 * called, will return a path relative to the file being transpiled by Babel.
 *
 * @param {[string, string]} wellKnownAliasEntry
 * @returns {[string, import('babel-plugin-transform-rewrite-imports').Callback<string>]}
 */
function makeDTsReplacerEntry([specifierRegExp, projectRootRelativeReplacerPath]) {
  // ? Assuming the current file is always at the project root
  const projectRoot = __dirname;

  return [
    specifierRegExp,
    function ({ filepath, capturingGroups }) {
      const specifierTarget = capturingGroups.at(1);

      if (specifierTarget?.startsWith('package.json')) {
        // TODO: replace with ErrorMessage.X
        throw new TypeError('unexpected "package.json" import in definition file');
      }

      const target = toAbsolutePath(
        projectRoot,
        // ? Importable non-distributables live in the project root's
        // ? node_modules directory, so we should facilitate access
        specifierTarget?.startsWith('node_modules/') ? '' : 'dist',
        projectRootRelativeReplacerPath
          // ? Ensure proper replacer syntax is used
          .replace(String.raw`\1`, specifierTarget || '')
          // ? Ensure proper extension is used
          .replace(dTsExtensionsToReplaceRegExp, '.js')
      );

      const result = toRelativePath(dirname(filepath), target);
      return (isRelativePathRegExp.test(result) ? '' : './') + result;
    }
  ];
}
