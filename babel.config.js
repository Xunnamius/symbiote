'use strict';

// * Every now and then, we adopt best practices from CRA
// * https://tinyurl.com/yakv4ggx

const pluginProposalExportDefaultFrom = require('@babel/plugin-proposal-export-default-from');
const pluginSyntaxImportAttributes = require('@babel/plugin-syntax-import-attributes');
const pluginSyntaxTypescript = require('@babel/plugin-syntax-typescript');
const presetEnv = require('@babel/preset-env');
const presetReact = require('@babel/preset-react');
const presetTypescript = require('@babel/preset-typescript');
const pluginModuleResolver = require('babel-plugin-module-resolver');
const pluginTransformRewriteImports = require('babel-plugin-transform-rewrite-imports');

// ? https://nodejs.org/en/about/releases
const NODE_LTS = 'maintained node versions';

/**
 * @type {import('@babel/core').TransformOptions}
 */
module.exports = {
  comments: false,
  parserOpts: { strictMode: true },
  assumptions: {
    constantReexports: true
  },
  plugins: [
    pluginProposalExportDefaultFrom,
    // ? This is required until tc39 makes up its mind
    pluginSyntaxImportAttributes,
    [
      pluginModuleResolver,
      {
        root: '.',
        extensions: ['.ts', '.tsx', '.js', '.jsx', '.json'],
        // ! The aliases described in "alias" are auto-generated by xscripts.
        // ! Instead of modifying it directly, consider regenerating aliases
        // ! across the entire project: `xscripts project renovate
        // ! --regenerate-aliases`; you can include custom aliases using the
        // ! `--with-alias` parameter.
        // * These aliases appear in:
        // *   - tsconfig.json      (JSON)
        // *   - babel.config.js    (CJS)
        // *   - eslint.config.mjs  (ESM)
        // *   - jest.config.mjs    (ESM)
        // *   - next.config.mjs    (ESM)
        // *   - webpack.config.mjs (ESM)
        alias: {
          '^universe (.+)$': String.raw`./src/\1`,
          '^universe$': './src/index.ts',
          '^multiverse#bfe (.+)$': String.raw`./packages/bfe/src/\1`,
          '^multiverse#babel-plugin-metadata-accumulator (.+)$': String.raw`./packages/babel-plugin-metadata-accumulator/src/\1`,
          '^multiverse#cli-utils (.+)$': String.raw`./packages/cli-utils/src/\1`,
          '^multiverse#debug (.+)$': String.raw`./packages/debug/src/\1`,
          '^multiverse#project-utils (.+)$': String.raw`./packages/project-utils/src/\1`,
          '^multiverse#rejoinder (.+)$': String.raw`./packages/rejoinder/src/\1`,
          '^multiverse#run (.+)$': String.raw`./packages/run/src/\1`,
          '^multiverse#bfe$': './packages/bfe/src/index.ts',
          '^multiverse#babel-plugin-metadata-accumulator$':
            './packages/babel-plugin-metadata-accumulator/src/index.ts',
          '^multiverse#cli-utils$': './packages/cli-utils/src/index.ts',
          '^multiverse#debug$': './packages/debug/src/index.ts',
          '^multiverse#project-utils$': './packages/project-utils/src/index.ts',
          '^multiverse#rejoinder$': './packages/rejoinder/src/index.ts',
          '^multiverse#run$': './packages/run/src/index.ts',
          '^testverse (.+)$': String.raw`./test/\1`,
          '^testverse#bfe (.+)$': String.raw`./packages/bfe/test/\1`,
          '^testverse#babel-plugin-metadata-accumulator (.+)$': String.raw`./packages/babel-plugin-metadata-accumulator/test/\1`,
          '^testverse#cli-utils (.+)$': String.raw`./packages/cli-utils/test/\1`,
          '^testverse#debug (.+)$': String.raw`./packages/debug/test/\1`,
          '^testverse#project-utils (.+)$': String.raw`./packages/project-utils/test/\1`,
          '^testverse#rejoinder (.+)$': String.raw`./packages/rejoinder/test/\1`,
          '^testverse#run (.+)$': String.raw`./packages/run/test/\1`,
          '^typeverse (.+)$': String.raw`./types/\1`,
          '^# (.+)$': String.raw`./\1`,
          '^#bfe (.+)$': String.raw`./packages/bfe/\1`,
          '^#babel-plugin-metadata-accumulator (.+)$': String.raw`./packages/babel-plugin-metadata-accumulator/\1`,
          '^#cli-utils (.+)$': String.raw`./packages/cli-utils/\1`,
          '^#debug (.+)$': String.raw`./packages/debug/\1`,
          '^#project-utils (.+)$': String.raw`./packages/project-utils/\1`,
          '^#rejoinder (.+)$': String.raw`./packages/rejoinder/\1`,
          '^#run (.+)$': String.raw`./packages/run/\1`
        }
      }
    ]
  ],
  // ? Sub-keys under the "env" config key will augment the above
  // ? configuration depending on the value of NODE_ENV and friends. Default
  // ? is: development
  env: {
    // * Used by Jest and `npm test`
    test: {
      comments: true,
      sourceMaps: 'inline',
      presets: [
        [presetEnv, { targets: { node: true } }],
        [presetTypescript, { allowDeclareFields: true }],
        [presetReact, { runtime: 'automatic' }]
        // ? We don't care about minification
      ],
      plugins: [
        // TODO: investigate why this is causing a strange error with coverage
        // ? Only active when testing, the plugin solves the following problem:
        // ? https://stackoverflow.com/q/40771520/1367414
        //'explicit-exports-references'
      ]
    },
    // * Used by `npm run build` for compiling CJS to code output in ./dist
    'production-cjs': {
      presets: [
        [
          presetEnv,
          {
            // ? https://babeljs.io/docs/en/babel-preset-env#modules
            modules: 'cjs',
            targets: NODE_LTS,
            useBuiltIns: 'usage',
            corejs: '3.38',
            shippedProposals: true,
            exclude: ['transform-dynamic-import']
          }
        ],
        [presetTypescript, { allowDeclareFields: true }],
        [presetReact, { runtime: 'automatic' }]
      ],
      plugins: [
        [
          pluginTransformRewriteImports,
          {
            appendExtension: '.js',
            replaceExtensions: { '(.+)\\.(c|m)?ts(x)?$': '$1.$2js$3' }
          }
        ]
      ]
    },
    // TODO: add production-esm too
    // * Used by `npm run build` for fixing declaration file imports in ./dist
    'production-types': {
      comments: true,
      plugins: [
        [pluginSyntaxTypescript, { dts: true }]
        // [
        //   'transform-rewrite-imports',
        //   {
        //     // TODO: fix these to be generalized... and if they're general
        //     // TODO: enough, maybe even merge these into production-cjs
        //     replaceExtensions: {
        //       // ? Ensure deep package.json imports resolve properly
        //       '^../../../package.json$': '../../package.json',
        //       // ? Ensure deep imports resolve properly
        //       '^../../../(.+)$': String.raw`../\1`
        //     }
        //   }
        // ]
      ]
    }
  }
};
